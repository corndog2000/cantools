/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.0.1 Mon Dec 27 12:43:59 2021.
 */

#include <string.h>

#include "dbc_rms.hpp"

int dbc_rms_m173_modulation_and_flux_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m173_modulation_and_flux_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

int16_t dbc_rms_m173_modulation_and_flux_info_t::d1_modulation_index_encode_t(double value)
{
    return (int16_t)(value / 0.0001);
}

double dbc_rms_m173_modulation_and_flux_info_t::d1_modulation_index_decode_t(int16_t value)
{
    return ((double)value * 0.0001);
}

bool dbc_rms_m173_modulation_and_flux_info_t::d1_modulation_index_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m173_modulation_and_flux_info_t::d2_flux_weakening_output_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m173_modulation_and_flux_info_t::d2_flux_weakening_output_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m173_modulation_and_flux_info_t::d2_flux_weakening_output_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m173_modulation_and_flux_info_t::d3_id_command_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m173_modulation_and_flux_info_t::d3_id_command_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m173_modulation_and_flux_info_t::d3_id_command_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m173_modulation_and_flux_info_t::d4_iq_command_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m173_modulation_and_flux_info_t::d4_iq_command_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m173_modulation_and_flux_info_t::d4_iq_command_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m172_torque_and_timer_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m172_torque_and_timer_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

int16_t dbc_rms_m172_torque_and_timer_info_t::d1_commanded_torque_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m172_torque_and_timer_info_t::d1_commanded_torque_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m172_torque_and_timer_info_t::d1_commanded_torque_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m172_torque_and_timer_info_t::d2_torque_feedback_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m172_torque_and_timer_info_t::d2_torque_feedback_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m172_torque_and_timer_info_t::d2_torque_feedback_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

uint32_t dbc_rms_m172_torque_and_timer_info_t::d3_power_on_timer_encode_t(double value)
{
    return (uint32_t)(value / 0.003);
}

double dbc_rms_m172_torque_and_timer_info_t::d3_power_on_timer_decode_t(uint32_t value)
{
    return ((double)value * 0.003);
}

bool dbc_rms_m172_torque_and_timer_info_t::d3_power_on_timer_is_in_range_t(uint32_t value)
{
    return (value <= 4294933333u);
}

int dbc_rms_m194_read_write_param_response_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m194_read_write_param_response_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

uint16_t dbc_rms_m194_read_write_param_response_t::d1_parameter_address_response_encode_t(double value)
{
    return (uint16_t)(value);
}

double dbc_rms_m194_read_write_param_response_t::d1_parameter_address_response_decode_t(uint16_t value)
{
    return ((double)value);
}

bool dbc_rms_m194_read_write_param_response_t::d1_parameter_address_response_is_in_range_t(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t dbc_rms_m194_read_write_param_response_t::d2_write_success_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m194_read_write_param_response_t::d2_write_success_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m194_read_write_param_response_t::d2_write_success_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

int16_t dbc_rms_m194_read_write_param_response_t::d3_data_response_encode_t(double value)
{
    return (int16_t)(value);
}

double dbc_rms_m194_read_write_param_response_t::d3_data_response_decode_t(int16_t value)
{
    return ((double)value);
}

bool dbc_rms_m194_read_write_param_response_t::d3_data_response_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m193_read_write_param_command_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m193_read_write_param_command_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

uint16_t dbc_rms_m193_read_write_param_command_t::d1_parameter_address_command_encode_t(double value)
{
    return (uint16_t)(value);
}

double dbc_rms_m193_read_write_param_command_t::d1_parameter_address_command_decode_t(uint16_t value)
{
    return ((double)value);
}

bool dbc_rms_m193_read_write_param_command_t::d1_parameter_address_command_is_in_range_t(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t dbc_rms_m193_read_write_param_command_t::d2_read_write_command_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m193_read_write_param_command_t::d2_read_write_command_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m193_read_write_param_command_t::d2_read_write_command_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

int16_t dbc_rms_m193_read_write_param_command_t::d3_data_command_encode_t(double value)
{
    return (int16_t)(value);
}

double dbc_rms_m193_read_write_param_command_t::d3_data_command_decode_t(int16_t value)
{
    return ((double)value);
}

bool dbc_rms_m193_read_write_param_command_t::d3_data_command_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m192_command_message_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m192_command_message_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

int16_t dbc_rms_m192_command_message_t::torque_command_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m192_command_message_t::torque_command_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m192_command_message_t::torque_command_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m192_command_message_t::speed_command_encode_t(double value)
{
    return (int16_t)(value);
}

double dbc_rms_m192_command_message_t::speed_command_decode_t(int16_t value)
{
    return ((double)value);
}

bool dbc_rms_m192_command_message_t::speed_command_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

uint8_t dbc_rms_m192_command_message_t::direction_command_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m192_command_message_t::direction_command_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m192_command_message_t::direction_command_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m192_command_message_t::inverter_enable_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m192_command_message_t::inverter_enable_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m192_command_message_t::inverter_enable_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m192_command_message_t::inverter_discharge_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m192_command_message_t::inverter_discharge_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m192_command_message_t::inverter_discharge_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m192_command_message_t::speed_mode_enable_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m192_command_message_t::speed_mode_enable_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m192_command_message_t::speed_mode_enable_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m192_command_message_t::rolling_counter_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m192_command_message_t::rolling_counter_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m192_command_message_t::rolling_counter_is_in_range_t(uint8_t value)
{
    return (value <= 15u);
}

int16_t dbc_rms_m192_command_message_t::torque_limit_command_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m192_command_message_t::torque_limit_command_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m192_command_message_t::torque_limit_command_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m171_fault_codes_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m171_fault_codes_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

uint16_t dbc_rms_m171_fault_codes_t::d1_post_fault_lo_encode_t(double value)
{
    return (uint16_t)(value);
}

double dbc_rms_m171_fault_codes_t::d1_post_fault_lo_decode_t(uint16_t value)
{
    return ((double)value);
}

bool dbc_rms_m171_fault_codes_t::d1_post_fault_lo_is_in_range_t(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t dbc_rms_m171_fault_codes_t::d2_post_fault_hi_encode_t(double value)
{
    return (uint16_t)(value);
}

double dbc_rms_m171_fault_codes_t::d2_post_fault_hi_decode_t(uint16_t value)
{
    return ((double)value);
}

bool dbc_rms_m171_fault_codes_t::d2_post_fault_hi_is_in_range_t(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t dbc_rms_m171_fault_codes_t::d3_run_fault_lo_encode_t(double value)
{
    return (uint16_t)(value);
}

double dbc_rms_m171_fault_codes_t::d3_run_fault_lo_decode_t(uint16_t value)
{
    return ((double)value);
}

bool dbc_rms_m171_fault_codes_t::d3_run_fault_lo_is_in_range_t(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t dbc_rms_m171_fault_codes_t::d4_run_fault_hi_encode_t(double value)
{
    return (uint16_t)(value);
}

double dbc_rms_m171_fault_codes_t::d4_run_fault_hi_decode_t(uint16_t value)
{
    return ((double)value);
}

bool dbc_rms_m171_fault_codes_t::d4_run_fault_hi_is_in_range_t(uint16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m170_internal_states_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m170_internal_states_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

uint8_t dbc_rms_m170_internal_states_t::d1_vsm_state_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d1_vsm_state_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d1_vsm_state_is_in_range_t(uint8_t value)
{
    return (value <= 15u);
}

uint8_t dbc_rms_m170_internal_states_t::d1_pwm_frequency_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d1_pwm_frequency_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d1_pwm_frequency_is_in_range_t(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t dbc_rms_m170_internal_states_t::d2_inverter_state_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d2_inverter_state_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d2_inverter_state_is_in_range_t(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t dbc_rms_m170_internal_states_t::d3_relay_1_status_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d3_relay_1_status_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d3_relay_1_status_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d3_relay_2_status_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d3_relay_2_status_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d3_relay_2_status_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d3_relay_3_status_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d3_relay_3_status_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d3_relay_3_status_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d3_relay_4_status_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d3_relay_4_status_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d3_relay_4_status_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d3_relay_5_status_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d3_relay_5_status_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d3_relay_5_status_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d3_relay_6_status_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d3_relay_6_status_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d3_relay_6_status_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d4_inverter_run_mode_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d4_inverter_run_mode_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d4_inverter_run_mode_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d4_inverter_discharge_state_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d4_inverter_discharge_state_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d4_inverter_discharge_state_is_in_range_t(uint8_t value)
{
    return (value <= 7u);
}

uint8_t dbc_rms_m170_internal_states_t::d5_inverter_command_mode_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d5_inverter_command_mode_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d5_inverter_command_mode_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d5_rolling_counter_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d5_rolling_counter_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d5_rolling_counter_is_in_range_t(uint8_t value)
{
    return (value <= 15u);
}

uint8_t dbc_rms_m170_internal_states_t::d6_inverter_enable_state_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d6_inverter_enable_state_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d6_inverter_enable_state_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d6_inverter_enable_lockout_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d6_inverter_enable_lockout_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d6_inverter_enable_lockout_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d7_direction_command_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d7_direction_command_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d7_direction_command_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d7_bms_active_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d7_bms_active_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d7_bms_active_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d7_bms_torque_limiting_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d7_bms_torque_limiting_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d7_bms_torque_limiting_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d7_max_speed_limiting_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d7_max_speed_limiting_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d7_max_speed_limiting_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d7_low_speed_limiting_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m170_internal_states_t::d7_low_speed_limiting_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m170_internal_states_t::d7_low_speed_limiting_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

int dbc_rms_m169_internal_voltages_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m169_internal_voltages_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

int16_t dbc_rms_m169_internal_voltages_t::d1_reference_voltage_1_5_encode_t(double value)
{
    return (int16_t)(value / 0.01);
}

double dbc_rms_m169_internal_voltages_t::d1_reference_voltage_1_5_decode_t(int16_t value)
{
    return ((double)value * 0.01);
}

bool dbc_rms_m169_internal_voltages_t::d1_reference_voltage_1_5_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m169_internal_voltages_t::d2_reference_voltage_2_5_encode_t(double value)
{
    return (int16_t)(value / 0.01);
}

double dbc_rms_m169_internal_voltages_t::d2_reference_voltage_2_5_decode_t(int16_t value)
{
    return ((double)value * 0.01);
}

bool dbc_rms_m169_internal_voltages_t::d2_reference_voltage_2_5_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m169_internal_voltages_t::d3_reference_voltage_5_0_encode_t(double value)
{
    return (int16_t)(value / 0.01);
}

double dbc_rms_m169_internal_voltages_t::d3_reference_voltage_5_0_decode_t(int16_t value)
{
    return ((double)value * 0.01);
}

bool dbc_rms_m169_internal_voltages_t::d3_reference_voltage_5_0_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m169_internal_voltages_t::d4_reference_voltage_12_0_encode_t(double value)
{
    return (int16_t)(value / 0.01);
}

double dbc_rms_m169_internal_voltages_t::d4_reference_voltage_12_0_decode_t(int16_t value)
{
    return ((double)value * 0.01);
}

bool dbc_rms_m169_internal_voltages_t::d4_reference_voltage_12_0_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m168_flux_id_iq_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m168_flux_id_iq_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

int16_t dbc_rms_m168_flux_id_iq_info_t::d1_flux_command_encode_t(double value)
{
    return (int16_t)(value / 0.001);
}

double dbc_rms_m168_flux_id_iq_info_t::d1_flux_command_decode_t(int16_t value)
{
    return ((double)value * 0.001);
}

bool dbc_rms_m168_flux_id_iq_info_t::d1_flux_command_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m168_flux_id_iq_info_t::d2_flux_feedback_encode_t(double value)
{
    return (int16_t)(value / 0.001);
}

double dbc_rms_m168_flux_id_iq_info_t::d2_flux_feedback_decode_t(int16_t value)
{
    return ((double)value * 0.001);
}

bool dbc_rms_m168_flux_id_iq_info_t::d2_flux_feedback_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m168_flux_id_iq_info_t::d3_id_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m168_flux_id_iq_info_t::d3_id_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m168_flux_id_iq_info_t::d3_id_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m168_flux_id_iq_info_t::d4_iq_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m168_flux_id_iq_info_t::d4_iq_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m168_flux_id_iq_info_t::d4_iq_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m167_voltage_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m167_voltage_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

int16_t dbc_rms_m167_voltage_info_t::d1_dc_bus_voltage_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m167_voltage_info_t::d1_dc_bus_voltage_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m167_voltage_info_t::d1_dc_bus_voltage_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m167_voltage_info_t::d2_output_voltage_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m167_voltage_info_t::d2_output_voltage_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m167_voltage_info_t::d2_output_voltage_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m167_voltage_info_t::d3_vab_vd_voltage_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m167_voltage_info_t::d3_vab_vd_voltage_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m167_voltage_info_t::d3_vab_vd_voltage_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m167_voltage_info_t::d4_vbc_vq_voltage_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m167_voltage_info_t::d4_vbc_vq_voltage_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m167_voltage_info_t::d4_vbc_vq_voltage_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m166_current_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m166_current_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

int16_t dbc_rms_m166_current_info_t::d1_phase_a_current_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m166_current_info_t::d1_phase_a_current_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m166_current_info_t::d1_phase_a_current_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m166_current_info_t::d2_phase_b_current_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m166_current_info_t::d2_phase_b_current_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m166_current_info_t::d2_phase_b_current_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m166_current_info_t::d3_phase_c_current_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m166_current_info_t::d3_phase_c_current_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m166_current_info_t::d3_phase_c_current_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m166_current_info_t::d4_dc_bus_current_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m166_current_info_t::d4_dc_bus_current_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m166_current_info_t::d4_dc_bus_current_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m165_motor_position_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m165_motor_position_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

uint16_t dbc_rms_m165_motor_position_info_t::d1_motor_angle_electrical_encode_t(double value)
{
    return (uint16_t)(value / 0.1);
}

double dbc_rms_m165_motor_position_info_t::d1_motor_angle_electrical_decode_t(uint16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m165_motor_position_info_t::d1_motor_angle_electrical_is_in_range_t(uint16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m165_motor_position_info_t::d2_motor_speed_encode_t(double value)
{
    return (int16_t)(value);
}

double dbc_rms_m165_motor_position_info_t::d2_motor_speed_decode_t(int16_t value)
{
    return ((double)value);
}

bool dbc_rms_m165_motor_position_info_t::d2_motor_speed_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m165_motor_position_info_t::d3_electrical_output_frequency_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m165_motor_position_info_t::d3_electrical_output_frequency_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m165_motor_position_info_t::d3_electrical_output_frequency_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m165_motor_position_info_t::d4_delta_resolver_filtered_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m165_motor_position_info_t::d4_delta_resolver_filtered_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m165_motor_position_info_t::d4_delta_resolver_filtered_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m164_digital_input_status_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m164_digital_input_status_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

uint8_t dbc_rms_m164_digital_input_status_t::d1_digital_input_1_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m164_digital_input_status_t::d1_digital_input_1_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m164_digital_input_status_t::d1_digital_input_1_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m164_digital_input_status_t::d2_digital_input_2_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m164_digital_input_status_t::d2_digital_input_2_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m164_digital_input_status_t::d2_digital_input_2_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m164_digital_input_status_t::d3_digital_input_3_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m164_digital_input_status_t::d3_digital_input_3_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m164_digital_input_status_t::d3_digital_input_3_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m164_digital_input_status_t::d4_digital_input_4_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m164_digital_input_status_t::d4_digital_input_4_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m164_digital_input_status_t::d4_digital_input_4_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m164_digital_input_status_t::d5_digital_input_5_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m164_digital_input_status_t::d5_digital_input_5_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m164_digital_input_status_t::d5_digital_input_5_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m164_digital_input_status_t::d6_digital_input_6_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m164_digital_input_status_t::d6_digital_input_6_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m164_digital_input_status_t::d6_digital_input_6_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m164_digital_input_status_t::d7_digital_input_7_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m164_digital_input_status_t::d7_digital_input_7_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m164_digital_input_status_t::d7_digital_input_7_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m164_digital_input_status_t::d8_digital_input_8_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m164_digital_input_status_t::d8_digital_input_8_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m164_digital_input_status_t::d8_digital_input_8_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

int dbc_rms_m163_analog_input_voltages_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m163_analog_input_voltages_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

uint16_t dbc_rms_m163_analog_input_voltages_t::d1_analog_input_1_encode_t(double value)
{
    return (uint16_t)(value / 0.01);
}

double dbc_rms_m163_analog_input_voltages_t::d1_analog_input_1_decode_t(uint16_t value)
{
    return ((double)value * 0.01);
}

bool dbc_rms_m163_analog_input_voltages_t::d1_analog_input_1_is_in_range_t(uint16_t value)
{
    return (value <= 1023u);
}

uint16_t dbc_rms_m163_analog_input_voltages_t::d2_analog_input_2_encode_t(double value)
{
    return (uint16_t)(value / 0.01);
}

double dbc_rms_m163_analog_input_voltages_t::d2_analog_input_2_decode_t(uint16_t value)
{
    return ((double)value * 0.01);
}

bool dbc_rms_m163_analog_input_voltages_t::d2_analog_input_2_is_in_range_t(uint16_t value)
{
    return (value <= 1023u);
}

uint16_t dbc_rms_m163_analog_input_voltages_t::d3_analog_input_3_encode_t(double value)
{
    return (uint16_t)(value / 0.01);
}

double dbc_rms_m163_analog_input_voltages_t::d3_analog_input_3_decode_t(uint16_t value)
{
    return ((double)value * 0.01);
}

bool dbc_rms_m163_analog_input_voltages_t::d3_analog_input_3_is_in_range_t(uint16_t value)
{
    return (value <= 1023u);
}

uint16_t dbc_rms_m163_analog_input_voltages_t::d4_analog_input_4_encode_t(double value)
{
    return (uint16_t)(value / 0.01);
}

double dbc_rms_m163_analog_input_voltages_t::d4_analog_input_4_decode_t(uint16_t value)
{
    return ((double)value * 0.01);
}

bool dbc_rms_m163_analog_input_voltages_t::d4_analog_input_4_is_in_range_t(uint16_t value)
{
    return (value <= 1023u);
}

uint16_t dbc_rms_m163_analog_input_voltages_t::d5_analog_input_5_encode_t(double value)
{
    return (uint16_t)(value / 0.01);
}

double dbc_rms_m163_analog_input_voltages_t::d5_analog_input_5_decode_t(uint16_t value)
{
    return ((double)value * 0.01);
}

bool dbc_rms_m163_analog_input_voltages_t::d5_analog_input_5_is_in_range_t(uint16_t value)
{
    return (value <= 1023u);
}

uint16_t dbc_rms_m163_analog_input_voltages_t::d6_analog_input_6_encode_t(double value)
{
    return (uint16_t)(value / 0.01);
}

double dbc_rms_m163_analog_input_voltages_t::d6_analog_input_6_decode_t(uint16_t value)
{
    return ((double)value * 0.01);
}

bool dbc_rms_m163_analog_input_voltages_t::d6_analog_input_6_is_in_range_t(uint16_t value)
{
    return (value <= 1023u);
}

int dbc_rms_m162_temperature_set_3_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m162_temperature_set_3_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

int16_t dbc_rms_m162_temperature_set_3_t::d1_rtd4_temperature_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m162_temperature_set_3_t::d1_rtd4_temperature_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m162_temperature_set_3_t::d1_rtd4_temperature_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m162_temperature_set_3_t::d2_rtd5_temperature_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m162_temperature_set_3_t::d2_rtd5_temperature_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m162_temperature_set_3_t::d2_rtd5_temperature_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m162_temperature_set_3_t::d3_motor_temperature_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m162_temperature_set_3_t::d3_motor_temperature_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m162_temperature_set_3_t::d3_motor_temperature_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m162_temperature_set_3_t::d4_torque_shudder_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m162_temperature_set_3_t::d4_torque_shudder_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m162_temperature_set_3_t::d4_torque_shudder_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m161_temperature_set_2_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m161_temperature_set_2_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

int16_t dbc_rms_m161_temperature_set_2_t::d1_control_board_temperature_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m161_temperature_set_2_t::d1_control_board_temperature_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m161_temperature_set_2_t::d1_control_board_temperature_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m161_temperature_set_2_t::d2_rtd1_temperature_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m161_temperature_set_2_t::d2_rtd1_temperature_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m161_temperature_set_2_t::d2_rtd1_temperature_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m161_temperature_set_2_t::d3_rtd2_temperature_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m161_temperature_set_2_t::d3_rtd2_temperature_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m161_temperature_set_2_t::d3_rtd2_temperature_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m161_temperature_set_2_t::d4_rtd3_temperature_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m161_temperature_set_2_t::d4_rtd3_temperature_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m161_temperature_set_2_t::d4_rtd3_temperature_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m160_temperature_set_1_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m160_temperature_set_1_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

int16_t dbc_rms_m160_temperature_set_1_t::d1_module_a_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m160_temperature_set_1_t::d1_module_a_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m160_temperature_set_1_t::d1_module_a_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m160_temperature_set_1_t::d2_module_b_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m160_temperature_set_1_t::d2_module_b_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m160_temperature_set_1_t::d2_module_b_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m160_temperature_set_1_t::d3_module_c_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m160_temperature_set_1_t::d3_module_c_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m160_temperature_set_1_t::d3_module_c_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m160_temperature_set_1_t::d4_gate_driver_board_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m160_temperature_set_1_t::d4_gate_driver_board_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m160_temperature_set_1_t::d4_gate_driver_board_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m174_firmware_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m174_firmware_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

uint16_t dbc_rms_m174_firmware_info_t::d1_project_code_eep_ver_encode_t(double value)
{
    return (uint16_t)(value);
}

double dbc_rms_m174_firmware_info_t::d1_project_code_eep_ver_decode_t(uint16_t value)
{
    return ((double)value);
}

bool dbc_rms_m174_firmware_info_t::d1_project_code_eep_ver_is_in_range_t(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t dbc_rms_m174_firmware_info_t::d2_sw_version_encode_t(double value)
{
    return (uint16_t)(value);
}

double dbc_rms_m174_firmware_info_t::d2_sw_version_decode_t(uint16_t value)
{
    return ((double)value);
}

bool dbc_rms_m174_firmware_info_t::d2_sw_version_is_in_range_t(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t dbc_rms_m174_firmware_info_t::d3_date_code_mmdd_encode_t(double value)
{
    return (uint16_t)(value);
}

double dbc_rms_m174_firmware_info_t::d3_date_code_mmdd_decode_t(uint16_t value)
{
    return ((double)value);
}

bool dbc_rms_m174_firmware_info_t::d3_date_code_mmdd_is_in_range_t(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t dbc_rms_m174_firmware_info_t::d4_date_code_yyyy_encode_t(double value)
{
    return (uint16_t)(value);
}

double dbc_rms_m174_firmware_info_t::d4_date_code_yyyy_decode_t(uint16_t value)
{
    return ((double)value);
}

bool dbc_rms_m174_firmware_info_t::d4_date_code_yyyy_is_in_range_t(uint16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m175_diag_data_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m175_diag_data_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

uint8_t dbc_rms_m175_diag_data_t::d1_buffer_record_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m175_diag_data_t::d1_buffer_record_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m175_diag_data_t::d1_buffer_record_is_in_range_t(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t dbc_rms_m175_diag_data_t::d2_buffer_segment_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m175_diag_data_t::d2_buffer_segment_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m175_diag_data_t::d2_buffer_segment_is_in_range_t(uint8_t value)
{
    return (value <= 5u);
}

int16_t dbc_rms_m175_diag_data_t::d3_diag_data_1_encode_t(double value)
{
    return (int16_t)(value);
}

double dbc_rms_m175_diag_data_t::d3_diag_data_1_decode_t(int16_t value)
{
    return ((double)value);
}

bool dbc_rms_m175_diag_data_t::d3_diag_data_1_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m175_diag_data_t::d4_diag_data_2_encode_t(double value)
{
    return (int16_t)(value);
}

double dbc_rms_m175_diag_data_t::d4_diag_data_2_decode_t(int16_t value)
{
    return ((double)value);
}

bool dbc_rms_m175_diag_data_t::d4_diag_data_2_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m175_diag_data_t::d5_diag_data_3_encode_t(double value)
{
    return (int16_t)(value);
}

double dbc_rms_m175_diag_data_t::d5_diag_data_3_decode_t(int16_t value)
{
    return ((double)value);
}

bool dbc_rms_m175_diag_data_t::d5_diag_data_3_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m187_u2_c_command_txd_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m187_u2_c_command_txd_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

uint8_t dbc_rms_m187_u2_c_command_txd_t::d1_id_byte_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m187_u2_c_command_txd_t::d1_id_byte_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m187_u2_c_command_txd_t::d1_id_byte_is_in_range_t(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t dbc_rms_m187_u2_c_command_txd_t::d2_setpoint_calc_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m187_u2_c_command_txd_t::d2_setpoint_calc_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m187_u2_c_command_txd_t::d2_setpoint_calc_is_in_range_t(uint8_t value)
{
    (void)value;

    return (true);
}

int dbc_rms_m188_u2_c_message_rxd_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m188_u2_c_message_rxd_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d1_hv_input_current_sensor_validity_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m188_u2_c_message_rxd_t::d1_hv_input_current_sensor_validity_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d1_hv_input_current_sensor_validity_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d2_14_v_master_fault_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m188_u2_c_message_rxd_t::d2_14_v_master_fault_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d2_14_v_master_fault_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d3_hv_input_current_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m188_u2_c_message_rxd_t::d3_hv_input_current_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d3_hv_input_current_is_in_range_t(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d4_dtc_status_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m188_u2_c_message_rxd_t::d4_dtc_status_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d4_dtc_status_is_in_range_t(uint8_t value)
{
    return (value <= 7u);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d5_dtc_index_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m188_u2_c_message_rxd_t::d5_dtc_index_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d5_dtc_index_is_in_range_t(uint8_t value)
{
    return (value <= 31u);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d6_14_v_monitor_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m188_u2_c_message_rxd_t::d6_14_v_monitor_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d6_14_v_monitor_is_in_range_t(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d7_14_v_conditional_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m188_u2_c_message_rxd_t::d7_14_v_conditional_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d7_14_v_conditional_is_in_range_t(uint8_t value)
{
    return (value <= 1u);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d8_14_v_current_monitor_encode_t(double value)
{
    return (uint8_t)(value);
}

double dbc_rms_m188_u2_c_message_rxd_t::d8_14_v_current_monitor_decode_t(uint8_t value)
{
    return ((double)value);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d8_14_v_current_monitor_is_in_range_t(uint8_t value)
{
    return (value <= 127u);
}

int dbc_rms_bms_current_limit_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_bms_current_limit_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

uint16_t dbc_rms_bms_current_limit_t::d1_max_discharge_current_encode_t(double value)
{
    return (uint16_t)(value);
}

double dbc_rms_bms_current_limit_t::d1_max_discharge_current_decode_t(uint16_t value)
{
    return ((double)value);
}

bool dbc_rms_bms_current_limit_t::d1_max_discharge_current_is_in_range_t(uint16_t value)
{
    return (value <= 1000u);
}

uint16_t dbc_rms_bms_current_limit_t::d2_max_charge_current_encode_t(double value)
{
    return (uint16_t)(value);
}

double dbc_rms_bms_current_limit_t::d2_max_charge_current_decode_t(uint16_t value)
{
    return ((double)value);
}

bool dbc_rms_bms_current_limit_t::d2_max_charge_current_is_in_range_t(uint16_t value)
{
    return (value <= 1000u);
}

int dbc_rms_m176_fast_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    return (8);
}

int dbc_rms_m176_fast_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    return (0);
}

int16_t dbc_rms_m176_fast_info_t::fast_torque_command_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m176_fast_info_t::fast_torque_command_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m176_fast_info_t::fast_torque_command_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m176_fast_info_t::fast_torque_feedback_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m176_fast_info_t::fast_torque_feedback_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m176_fast_info_t::fast_torque_feedback_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m176_fast_info_t::fast_motor_speed_encode_t(double value)
{
    return (int16_t)(value);
}

double dbc_rms_m176_fast_info_t::fast_motor_speed_decode_t(int16_t value)
{
    return ((double)value);
}

bool dbc_rms_m176_fast_info_t::fast_motor_speed_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}

int16_t dbc_rms_m176_fast_info_t::fast_dc_bus_voltage_encode_t(double value)
{
    return (int16_t)(value / 0.1);
}

double dbc_rms_m176_fast_info_t::fast_dc_bus_voltage_decode_t(int16_t value)
{
    return ((double)value * 0.1);
}

bool dbc_rms_m176_fast_info_t::fast_dc_bus_voltage_is_in_range_t(int16_t value)
{
    (void)value;

    return (true);
}
